
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "COMPARATOR ENTER EQU FLOAT FOR IDENTIFIER IF ILLEGAL IN INT POINTS PRINT RANGE TAB WHILE programme : statement   programme : statement ENTER programme  statement : assignation\n\t\t\t\t\t\t| structure expression : INT\n\t\t| FLOAT \n\t\t| IDENTIFIER \n\t\t  statement : PRINT expression  expression : expression COMPARATOR expressionstructure : IF expression POINTS ENTER TAB programme  structure : WHILE expression POINTS ENTER programme expression : '(' expression ')' expression : TAB expression assignation : IDENTIFIER EQU expression "
    
_lr_action_items = {'PRINT':([0,9,29,30,],[5,5,5,5,]),'IDENTIFIER':([0,5,7,8,9,14,15,16,20,29,30,],[6,13,13,13,6,13,13,13,13,6,6,]),'IF':([0,9,29,30,],[7,7,7,7,]),'WHILE':([0,9,29,30,],[8,8,8,8,]),'$end':([1,2,3,4,10,11,12,13,19,22,23,26,27,31,32,],[0,-1,-3,-4,-8,-5,-6,-7,-2,-13,-14,-9,-12,-11,-10,]),'ENTER':([2,3,4,10,11,12,13,19,22,23,24,25,26,27,31,32,],[9,-3,-4,-8,-5,-6,-7,-2,-13,-14,28,29,-9,-12,-11,-10,]),'INT':([5,7,8,14,15,16,20,],[11,11,11,11,11,11,11,]),'FLOAT':([5,7,8,14,15,16,20,],[12,12,12,12,12,12,12,]),'(':([5,7,8,14,15,16,20,],[14,14,14,14,14,14,14,]),'TAB':([5,7,8,14,15,16,20,28,],[15,15,15,15,15,15,15,30,]),'EQU':([6,],[16,]),'COMPARATOR':([10,11,12,13,17,18,21,22,23,26,27,],[20,-5,-6,-7,20,20,20,20,20,20,-12,]),'POINTS':([11,12,13,17,18,22,26,27,],[-5,-6,-7,24,25,-13,-9,-12,]),')':([11,12,13,21,22,26,27,],[-5,-6,-7,27,-13,-9,-12,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'programme':([0,9,29,30,],[1,19,31,32,]),'statement':([0,9,29,30,],[2,2,2,2,]),'assignation':([0,9,29,30,],[3,3,3,3,]),'structure':([0,9,29,30,],[4,4,4,4,]),'expression':([5,7,8,14,15,16,20,],[10,17,18,21,22,23,26,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> programme","S'",1,None,None,None),
  ('programme -> statement','programme',1,'p_programme_statement','parser4.py',11),
  ('programme -> statement ENTER programme','programme',3,'p_programme_recursive','parser4.py',15),
  ('statement -> assignation','statement',1,'p_statement','parser4.py',19),
  ('statement -> structure','statement',1,'p_statement','parser4.py',20),
  ('expression -> INT','expression',1,'p_expression_num_or_var','parser4.py',24),
  ('expression -> FLOAT','expression',1,'p_expression_num_or_var','parser4.py',25),
  ('expression -> IDENTIFIER','expression',1,'p_expression_num_or_var','parser4.py',26),
  ('statement -> PRINT expression','statement',2,'p_statement_print','parser4.py',31),
  ('expression -> expression COMPARATOR expression','expression',3,'p_expression_comp','parser4.py',35),
  ('structure -> IF expression POINTS ENTER TAB programme','structure',6,'p_structure_if','parser4.py',39),
  ('structure -> WHILE expression POINTS ENTER programme','structure',5,'p_structure_while','parser4.py',43),
  ('expression -> ( expression )','expression',3,'p_expression_paren','parser4.py',47),
  ('expression -> TAB expression','expression',2,'p_expression_tab','parser4.py',52),
  ('assignation -> IDENTIFIER EQU expression','assignation',3,'p_assign','parser4.py',56),
]
