Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ELSE
    FOR
    ILLEGAL
    IN
    RANGE

Grammar

Rule 0     S' -> programme
Rule 1     programme -> statement
Rule 2     programme -> statement ENTER programme
Rule 3     statement -> assignation
Rule 4     statement -> structure
Rule 5     expression -> INT
Rule 6     expression -> FLOAT
Rule 7     expression -> IDENTIFIER
Rule 8     statement -> PRINT expression
Rule 9     expression -> expression COMPARATOR expression
Rule 10    structure -> IF expression POINTS ENTER TAB programme #
Rule 11    structure -> DEF expression ( ) POINTS TAB programme #
Rule 12    structure -> WHILE expression POINTS ENTER TAB programme #
Rule 13    expression -> ( expression )
Rule 14    expression -> TAB expression
Rule 15    assignation -> IDENTIFIER EQU expression

Terminals, with rules where they appear

#                    : 10 11 12
(                    : 11 13
)                    : 11 13
COMPARATOR           : 9
DEF                  : 11
ELSE                 : 
ENTER                : 2 10 12
EQU                  : 15
FLOAT                : 6
FOR                  : 
IDENTIFIER           : 7 15
IF                   : 10
ILLEGAL              : 
IN                   : 
INT                  : 5
POINTS               : 10 11 12
PRINT                : 8
RANGE                : 
TAB                  : 10 11 12 14
WHILE                : 12
error                : 

Nonterminals, with rules where they appear

assignation          : 3
expression           : 8 9 9 10 11 12 13 14 15
programme            : 2 10 11 12 0
statement            : 1 2
structure            : 4

Parsing method: LALR

state 0

    (0) S' -> . programme
    (1) programme -> . statement
    (2) programme -> . statement ENTER programme
    (3) statement -> . assignation
    (4) statement -> . structure
    (8) statement -> . PRINT expression
    (15) assignation -> . IDENTIFIER EQU expression
    (10) structure -> . IF expression POINTS ENTER TAB programme #
    (11) structure -> . DEF expression ( ) POINTS TAB programme #
    (12) structure -> . WHILE expression POINTS ENTER TAB programme #

    PRINT           shift and go to state 5
    IDENTIFIER      shift and go to state 6
    IF              shift and go to state 7
    DEF             shift and go to state 8
    WHILE           shift and go to state 9

    programme                      shift and go to state 1
    statement                      shift and go to state 2
    assignation                    shift and go to state 3
    structure                      shift and go to state 4

state 1

    (0) S' -> programme .



state 2

    (1) programme -> statement .
    (2) programme -> statement . ENTER programme

    $end            reduce using rule 1 (programme -> statement .)
    #               reduce using rule 1 (programme -> statement .)
    ENTER           shift and go to state 10


state 3

    (3) statement -> assignation .

    ENTER           reduce using rule 3 (statement -> assignation .)
    $end            reduce using rule 3 (statement -> assignation .)
    #               reduce using rule 3 (statement -> assignation .)


state 4

    (4) statement -> structure .

    ENTER           reduce using rule 4 (statement -> structure .)
    $end            reduce using rule 4 (statement -> structure .)
    #               reduce using rule 4 (statement -> structure .)


state 5

    (8) statement -> PRINT . expression
    (5) expression -> . INT
    (6) expression -> . FLOAT
    (7) expression -> . IDENTIFIER
    (9) expression -> . expression COMPARATOR expression
    (13) expression -> . ( expression )
    (14) expression -> . TAB expression

    INT             shift and go to state 12
    FLOAT           shift and go to state 13
    IDENTIFIER      shift and go to state 14
    (               shift and go to state 15
    TAB             shift and go to state 16

    expression                     shift and go to state 11

state 6

    (15) assignation -> IDENTIFIER . EQU expression

    EQU             shift and go to state 17


state 7

    (10) structure -> IF . expression POINTS ENTER TAB programme #
    (5) expression -> . INT
    (6) expression -> . FLOAT
    (7) expression -> . IDENTIFIER
    (9) expression -> . expression COMPARATOR expression
    (13) expression -> . ( expression )
    (14) expression -> . TAB expression

    INT             shift and go to state 12
    FLOAT           shift and go to state 13
    IDENTIFIER      shift and go to state 14
    (               shift and go to state 15
    TAB             shift and go to state 16

    expression                     shift and go to state 18

state 8

    (11) structure -> DEF . expression ( ) POINTS TAB programme #
    (5) expression -> . INT
    (6) expression -> . FLOAT
    (7) expression -> . IDENTIFIER
    (9) expression -> . expression COMPARATOR expression
    (13) expression -> . ( expression )
    (14) expression -> . TAB expression

    INT             shift and go to state 12
    FLOAT           shift and go to state 13
    IDENTIFIER      shift and go to state 14
    (               shift and go to state 15
    TAB             shift and go to state 16

    expression                     shift and go to state 19

state 9

    (12) structure -> WHILE . expression POINTS ENTER TAB programme #
    (5) expression -> . INT
    (6) expression -> . FLOAT
    (7) expression -> . IDENTIFIER
    (9) expression -> . expression COMPARATOR expression
    (13) expression -> . ( expression )
    (14) expression -> . TAB expression

    INT             shift and go to state 12
    FLOAT           shift and go to state 13
    IDENTIFIER      shift and go to state 14
    (               shift and go to state 15
    TAB             shift and go to state 16

    expression                     shift and go to state 20

state 10

    (2) programme -> statement ENTER . programme
    (1) programme -> . statement
    (2) programme -> . statement ENTER programme
    (3) statement -> . assignation
    (4) statement -> . structure
    (8) statement -> . PRINT expression
    (15) assignation -> . IDENTIFIER EQU expression
    (10) structure -> . IF expression POINTS ENTER TAB programme #
    (11) structure -> . DEF expression ( ) POINTS TAB programme #
    (12) structure -> . WHILE expression POINTS ENTER TAB programme #

    PRINT           shift and go to state 5
    IDENTIFIER      shift and go to state 6
    IF              shift and go to state 7
    DEF             shift and go to state 8
    WHILE           shift and go to state 9

    statement                      shift and go to state 2
    programme                      shift and go to state 21
    assignation                    shift and go to state 3
    structure                      shift and go to state 4

state 11

    (8) statement -> PRINT expression .
    (9) expression -> expression . COMPARATOR expression

    ENTER           reduce using rule 8 (statement -> PRINT expression .)
    $end            reduce using rule 8 (statement -> PRINT expression .)
    #               reduce using rule 8 (statement -> PRINT expression .)
    COMPARATOR      shift and go to state 22


state 12

    (5) expression -> INT .

    COMPARATOR      reduce using rule 5 (expression -> INT .)
    ENTER           reduce using rule 5 (expression -> INT .)
    $end            reduce using rule 5 (expression -> INT .)
    #               reduce using rule 5 (expression -> INT .)
    POINTS          reduce using rule 5 (expression -> INT .)
    (               reduce using rule 5 (expression -> INT .)
    )               reduce using rule 5 (expression -> INT .)


state 13

    (6) expression -> FLOAT .

    COMPARATOR      reduce using rule 6 (expression -> FLOAT .)
    ENTER           reduce using rule 6 (expression -> FLOAT .)
    $end            reduce using rule 6 (expression -> FLOAT .)
    #               reduce using rule 6 (expression -> FLOAT .)
    POINTS          reduce using rule 6 (expression -> FLOAT .)
    (               reduce using rule 6 (expression -> FLOAT .)
    )               reduce using rule 6 (expression -> FLOAT .)


state 14

    (7) expression -> IDENTIFIER .

    COMPARATOR      reduce using rule 7 (expression -> IDENTIFIER .)
    ENTER           reduce using rule 7 (expression -> IDENTIFIER .)
    $end            reduce using rule 7 (expression -> IDENTIFIER .)
    #               reduce using rule 7 (expression -> IDENTIFIER .)
    POINTS          reduce using rule 7 (expression -> IDENTIFIER .)
    (               reduce using rule 7 (expression -> IDENTIFIER .)
    )               reduce using rule 7 (expression -> IDENTIFIER .)


state 15

    (13) expression -> ( . expression )
    (5) expression -> . INT
    (6) expression -> . FLOAT
    (7) expression -> . IDENTIFIER
    (9) expression -> . expression COMPARATOR expression
    (13) expression -> . ( expression )
    (14) expression -> . TAB expression

    INT             shift and go to state 12
    FLOAT           shift and go to state 13
    IDENTIFIER      shift and go to state 14
    (               shift and go to state 15
    TAB             shift and go to state 16

    expression                     shift and go to state 23

state 16

    (14) expression -> TAB . expression
    (5) expression -> . INT
    (6) expression -> . FLOAT
    (7) expression -> . IDENTIFIER
    (9) expression -> . expression COMPARATOR expression
    (13) expression -> . ( expression )
    (14) expression -> . TAB expression

    INT             shift and go to state 12
    FLOAT           shift and go to state 13
    IDENTIFIER      shift and go to state 14
    (               shift and go to state 15
    TAB             shift and go to state 16

    expression                     shift and go to state 24

state 17

    (15) assignation -> IDENTIFIER EQU . expression
    (5) expression -> . INT
    (6) expression -> . FLOAT
    (7) expression -> . IDENTIFIER
    (9) expression -> . expression COMPARATOR expression
    (13) expression -> . ( expression )
    (14) expression -> . TAB expression

    INT             shift and go to state 12
    FLOAT           shift and go to state 13
    IDENTIFIER      shift and go to state 14
    (               shift and go to state 15
    TAB             shift and go to state 16

    expression                     shift and go to state 25

state 18

    (10) structure -> IF expression . POINTS ENTER TAB programme #
    (9) expression -> expression . COMPARATOR expression

    POINTS          shift and go to state 26
    COMPARATOR      shift and go to state 22


state 19

    (11) structure -> DEF expression . ( ) POINTS TAB programme #
    (9) expression -> expression . COMPARATOR expression

    (               shift and go to state 27
    COMPARATOR      shift and go to state 22


state 20

    (12) structure -> WHILE expression . POINTS ENTER TAB programme #
    (9) expression -> expression . COMPARATOR expression

    POINTS          shift and go to state 28
    COMPARATOR      shift and go to state 22


state 21

    (2) programme -> statement ENTER programme .

    $end            reduce using rule 2 (programme -> statement ENTER programme .)
    #               reduce using rule 2 (programme -> statement ENTER programme .)


state 22

    (9) expression -> expression COMPARATOR . expression
    (5) expression -> . INT
    (6) expression -> . FLOAT
    (7) expression -> . IDENTIFIER
    (9) expression -> . expression COMPARATOR expression
    (13) expression -> . ( expression )
    (14) expression -> . TAB expression

    INT             shift and go to state 12
    FLOAT           shift and go to state 13
    IDENTIFIER      shift and go to state 14
    (               shift and go to state 15
    TAB             shift and go to state 16

    expression                     shift and go to state 29

state 23

    (13) expression -> ( expression . )
    (9) expression -> expression . COMPARATOR expression

    )               shift and go to state 30
    COMPARATOR      shift and go to state 22


state 24

    (14) expression -> TAB expression .
    (9) expression -> expression . COMPARATOR expression

  ! shift/reduce conflict for COMPARATOR resolved as shift
    ENTER           reduce using rule 14 (expression -> TAB expression .)
    $end            reduce using rule 14 (expression -> TAB expression .)
    #               reduce using rule 14 (expression -> TAB expression .)
    POINTS          reduce using rule 14 (expression -> TAB expression .)
    (               reduce using rule 14 (expression -> TAB expression .)
    )               reduce using rule 14 (expression -> TAB expression .)
    COMPARATOR      shift and go to state 22

  ! COMPARATOR      [ reduce using rule 14 (expression -> TAB expression .) ]


state 25

    (15) assignation -> IDENTIFIER EQU expression .
    (9) expression -> expression . COMPARATOR expression

    ENTER           reduce using rule 15 (assignation -> IDENTIFIER EQU expression .)
    $end            reduce using rule 15 (assignation -> IDENTIFIER EQU expression .)
    #               reduce using rule 15 (assignation -> IDENTIFIER EQU expression .)
    COMPARATOR      shift and go to state 22


state 26

    (10) structure -> IF expression POINTS . ENTER TAB programme #

    ENTER           shift and go to state 31


state 27

    (11) structure -> DEF expression ( . ) POINTS TAB programme #

    )               shift and go to state 32


state 28

    (12) structure -> WHILE expression POINTS . ENTER TAB programme #

    ENTER           shift and go to state 33


state 29

    (9) expression -> expression COMPARATOR expression .
    (9) expression -> expression . COMPARATOR expression

  ! shift/reduce conflict for COMPARATOR resolved as shift
    ENTER           reduce using rule 9 (expression -> expression COMPARATOR expression .)
    $end            reduce using rule 9 (expression -> expression COMPARATOR expression .)
    #               reduce using rule 9 (expression -> expression COMPARATOR expression .)
    POINTS          reduce using rule 9 (expression -> expression COMPARATOR expression .)
    (               reduce using rule 9 (expression -> expression COMPARATOR expression .)
    )               reduce using rule 9 (expression -> expression COMPARATOR expression .)
    COMPARATOR      shift and go to state 22

  ! COMPARATOR      [ reduce using rule 9 (expression -> expression COMPARATOR expression .) ]


state 30

    (13) expression -> ( expression ) .

    COMPARATOR      reduce using rule 13 (expression -> ( expression ) .)
    ENTER           reduce using rule 13 (expression -> ( expression ) .)
    $end            reduce using rule 13 (expression -> ( expression ) .)
    #               reduce using rule 13 (expression -> ( expression ) .)
    POINTS          reduce using rule 13 (expression -> ( expression ) .)
    (               reduce using rule 13 (expression -> ( expression ) .)
    )               reduce using rule 13 (expression -> ( expression ) .)


state 31

    (10) structure -> IF expression POINTS ENTER . TAB programme #

    TAB             shift and go to state 34


state 32

    (11) structure -> DEF expression ( ) . POINTS TAB programme #

    POINTS          shift and go to state 35


state 33

    (12) structure -> WHILE expression POINTS ENTER . TAB programme #

    TAB             shift and go to state 36


state 34

    (10) structure -> IF expression POINTS ENTER TAB . programme #
    (1) programme -> . statement
    (2) programme -> . statement ENTER programme
    (3) statement -> . assignation
    (4) statement -> . structure
    (8) statement -> . PRINT expression
    (15) assignation -> . IDENTIFIER EQU expression
    (10) structure -> . IF expression POINTS ENTER TAB programme #
    (11) structure -> . DEF expression ( ) POINTS TAB programme #
    (12) structure -> . WHILE expression POINTS ENTER TAB programme #

    PRINT           shift and go to state 5
    IDENTIFIER      shift and go to state 6
    IF              shift and go to state 7
    DEF             shift and go to state 8
    WHILE           shift and go to state 9

    programme                      shift and go to state 37
    statement                      shift and go to state 2
    assignation                    shift and go to state 3
    structure                      shift and go to state 4

state 35

    (11) structure -> DEF expression ( ) POINTS . TAB programme #

    TAB             shift and go to state 38


state 36

    (12) structure -> WHILE expression POINTS ENTER TAB . programme #
    (1) programme -> . statement
    (2) programme -> . statement ENTER programme
    (3) statement -> . assignation
    (4) statement -> . structure
    (8) statement -> . PRINT expression
    (15) assignation -> . IDENTIFIER EQU expression
    (10) structure -> . IF expression POINTS ENTER TAB programme #
    (11) structure -> . DEF expression ( ) POINTS TAB programme #
    (12) structure -> . WHILE expression POINTS ENTER TAB programme #

    PRINT           shift and go to state 5
    IDENTIFIER      shift and go to state 6
    IF              shift and go to state 7
    DEF             shift and go to state 8
    WHILE           shift and go to state 9

    programme                      shift and go to state 39
    statement                      shift and go to state 2
    assignation                    shift and go to state 3
    structure                      shift and go to state 4

state 37

    (10) structure -> IF expression POINTS ENTER TAB programme . #

    #               shift and go to state 40


state 38

    (11) structure -> DEF expression ( ) POINTS TAB . programme #
    (1) programme -> . statement
    (2) programme -> . statement ENTER programme
    (3) statement -> . assignation
    (4) statement -> . structure
    (8) statement -> . PRINT expression
    (15) assignation -> . IDENTIFIER EQU expression
    (10) structure -> . IF expression POINTS ENTER TAB programme #
    (11) structure -> . DEF expression ( ) POINTS TAB programme #
    (12) structure -> . WHILE expression POINTS ENTER TAB programme #

    PRINT           shift and go to state 5
    IDENTIFIER      shift and go to state 6
    IF              shift and go to state 7
    DEF             shift and go to state 8
    WHILE           shift and go to state 9

    programme                      shift and go to state 41
    statement                      shift and go to state 2
    assignation                    shift and go to state 3
    structure                      shift and go to state 4

state 39

    (12) structure -> WHILE expression POINTS ENTER TAB programme . #

    #               shift and go to state 42


state 40

    (10) structure -> IF expression POINTS ENTER TAB programme # .

    ENTER           reduce using rule 10 (structure -> IF expression POINTS ENTER TAB programme # .)
    $end            reduce using rule 10 (structure -> IF expression POINTS ENTER TAB programme # .)
    #               reduce using rule 10 (structure -> IF expression POINTS ENTER TAB programme # .)


state 41

    (11) structure -> DEF expression ( ) POINTS TAB programme . #

    #               shift and go to state 43


state 42

    (12) structure -> WHILE expression POINTS ENTER TAB programme # .

    ENTER           reduce using rule 12 (structure -> WHILE expression POINTS ENTER TAB programme # .)
    $end            reduce using rule 12 (structure -> WHILE expression POINTS ENTER TAB programme # .)
    #               reduce using rule 12 (structure -> WHILE expression POINTS ENTER TAB programme # .)


state 43

    (11) structure -> DEF expression ( ) POINTS TAB programme # .

    ENTER           reduce using rule 11 (structure -> DEF expression ( ) POINTS TAB programme # .)
    $end            reduce using rule 11 (structure -> DEF expression ( ) POINTS TAB programme # .)
    #               reduce using rule 11 (structure -> DEF expression ( ) POINTS TAB programme # .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for COMPARATOR in state 24 resolved as shift
WARNING: shift/reduce conflict for COMPARATOR in state 29 resolved as shift
