Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> programme
Rule 1     programme -> statement
Rule 2     programme -> statement ENTER programme
Rule 3     statement -> assignation
Rule 4     statement -> structure
Rule 5     expression -> INT
Rule 6     expression -> FLOAT
Rule 7     expression -> IDENTIFIER
Rule 8     expression -> expression MUL_OP expression
Rule 9     expression -> expression ADD_OP expression
Rule 10    expression -> expression COMPARATOR expression
Rule 11    assignation -> IDENTIFIER EQU expression
Rule 12    statement -> PRINT expression
Rule 13    structure -> IF expression POINTS ENTER TAB programme #
Rule 14    structure -> DEF expression ( ) POINTS ENTER TAB programme #
Rule 15    structure -> WHILE expression POINTS ENTER TAB programme #
Rule 16    expression -> ( expression )

Terminals, with rules where they appear

#                    : 13 14 15
(                    : 14 16
)                    : 14 16
ADD_OP               : 9
COMPARATOR           : 10
DEF                  : 14
ENTER                : 2 13 14 15
EQU                  : 11
FLOAT                : 6
IDENTIFIER           : 7 11
IF                   : 13
INT                  : 5
MUL_OP               : 8
POINTS               : 13 14 15
PRINT                : 12
TAB                  : 13 14 15
WHILE                : 15
error                : 

Nonterminals, with rules where they appear

assignation          : 3
expression           : 8 8 9 9 10 10 11 12 13 14 15 16
programme            : 2 13 14 15 0
statement            : 1 2
structure            : 4

Parsing method: LALR

state 0

    (0) S' -> . programme
    (1) programme -> . statement
    (2) programme -> . statement ENTER programme
    (3) statement -> . assignation
    (4) statement -> . structure
    (12) statement -> . PRINT expression
    (11) assignation -> . IDENTIFIER EQU expression
    (13) structure -> . IF expression POINTS ENTER TAB programme #
    (14) structure -> . DEF expression ( ) POINTS ENTER TAB programme #
    (15) structure -> . WHILE expression POINTS ENTER TAB programme #

    PRINT           shift and go to state 5
    IDENTIFIER      shift and go to state 6
    IF              shift and go to state 7
    DEF             shift and go to state 8
    WHILE           shift and go to state 9

    programme                      shift and go to state 1
    statement                      shift and go to state 2
    assignation                    shift and go to state 3
    structure                      shift and go to state 4

state 1

    (0) S' -> programme .



state 2

    (1) programme -> statement .
    (2) programme -> statement . ENTER programme

    $end            reduce using rule 1 (programme -> statement .)
    #               reduce using rule 1 (programme -> statement .)
    ENTER           shift and go to state 10


state 3

    (3) statement -> assignation .

    ENTER           reduce using rule 3 (statement -> assignation .)
    $end            reduce using rule 3 (statement -> assignation .)
    #               reduce using rule 3 (statement -> assignation .)


state 4

    (4) statement -> structure .

    ENTER           reduce using rule 4 (statement -> structure .)
    $end            reduce using rule 4 (statement -> structure .)
    #               reduce using rule 4 (statement -> structure .)


state 5

    (12) statement -> PRINT . expression
    (5) expression -> . INT
    (6) expression -> . FLOAT
    (7) expression -> . IDENTIFIER
    (8) expression -> . expression MUL_OP expression
    (9) expression -> . expression ADD_OP expression
    (10) expression -> . expression COMPARATOR expression
    (16) expression -> . ( expression )

    INT             shift and go to state 12
    FLOAT           shift and go to state 13
    IDENTIFIER      shift and go to state 14
    (               shift and go to state 15

    expression                     shift and go to state 11

state 6

    (11) assignation -> IDENTIFIER . EQU expression

    EQU             shift and go to state 16


state 7

    (13) structure -> IF . expression POINTS ENTER TAB programme #
    (5) expression -> . INT
    (6) expression -> . FLOAT
    (7) expression -> . IDENTIFIER
    (8) expression -> . expression MUL_OP expression
    (9) expression -> . expression ADD_OP expression
    (10) expression -> . expression COMPARATOR expression
    (16) expression -> . ( expression )

    INT             shift and go to state 12
    FLOAT           shift and go to state 13
    IDENTIFIER      shift and go to state 14
    (               shift and go to state 15

    expression                     shift and go to state 17

state 8

    (14) structure -> DEF . expression ( ) POINTS ENTER TAB programme #
    (5) expression -> . INT
    (6) expression -> . FLOAT
    (7) expression -> . IDENTIFIER
    (8) expression -> . expression MUL_OP expression
    (9) expression -> . expression ADD_OP expression
    (10) expression -> . expression COMPARATOR expression
    (16) expression -> . ( expression )

    INT             shift and go to state 12
    FLOAT           shift and go to state 13
    IDENTIFIER      shift and go to state 14
    (               shift and go to state 15

    expression                     shift and go to state 18

state 9

    (15) structure -> WHILE . expression POINTS ENTER TAB programme #
    (5) expression -> . INT
    (6) expression -> . FLOAT
    (7) expression -> . IDENTIFIER
    (8) expression -> . expression MUL_OP expression
    (9) expression -> . expression ADD_OP expression
    (10) expression -> . expression COMPARATOR expression
    (16) expression -> . ( expression )

    INT             shift and go to state 12
    FLOAT           shift and go to state 13
    IDENTIFIER      shift and go to state 14
    (               shift and go to state 15

    expression                     shift and go to state 19

state 10

    (2) programme -> statement ENTER . programme
    (1) programme -> . statement
    (2) programme -> . statement ENTER programme
    (3) statement -> . assignation
    (4) statement -> . structure
    (12) statement -> . PRINT expression
    (11) assignation -> . IDENTIFIER EQU expression
    (13) structure -> . IF expression POINTS ENTER TAB programme #
    (14) structure -> . DEF expression ( ) POINTS ENTER TAB programme #
    (15) structure -> . WHILE expression POINTS ENTER TAB programme #

    PRINT           shift and go to state 5
    IDENTIFIER      shift and go to state 6
    IF              shift and go to state 7
    DEF             shift and go to state 8
    WHILE           shift and go to state 9

    statement                      shift and go to state 2
    programme                      shift and go to state 20
    assignation                    shift and go to state 3
    structure                      shift and go to state 4

state 11

    (12) statement -> PRINT expression .
    (8) expression -> expression . MUL_OP expression
    (9) expression -> expression . ADD_OP expression
    (10) expression -> expression . COMPARATOR expression

    ENTER           reduce using rule 12 (statement -> PRINT expression .)
    $end            reduce using rule 12 (statement -> PRINT expression .)
    #               reduce using rule 12 (statement -> PRINT expression .)
    MUL_OP          shift and go to state 21
    ADD_OP          shift and go to state 22
    COMPARATOR      shift and go to state 23


state 12

    (5) expression -> INT .

    MUL_OP          reduce using rule 5 (expression -> INT .)
    ADD_OP          reduce using rule 5 (expression -> INT .)
    COMPARATOR      reduce using rule 5 (expression -> INT .)
    ENTER           reduce using rule 5 (expression -> INT .)
    $end            reduce using rule 5 (expression -> INT .)
    #               reduce using rule 5 (expression -> INT .)
    POINTS          reduce using rule 5 (expression -> INT .)
    (               reduce using rule 5 (expression -> INT .)
    )               reduce using rule 5 (expression -> INT .)


state 13

    (6) expression -> FLOAT .

    MUL_OP          reduce using rule 6 (expression -> FLOAT .)
    ADD_OP          reduce using rule 6 (expression -> FLOAT .)
    COMPARATOR      reduce using rule 6 (expression -> FLOAT .)
    ENTER           reduce using rule 6 (expression -> FLOAT .)
    $end            reduce using rule 6 (expression -> FLOAT .)
    #               reduce using rule 6 (expression -> FLOAT .)
    POINTS          reduce using rule 6 (expression -> FLOAT .)
    (               reduce using rule 6 (expression -> FLOAT .)
    )               reduce using rule 6 (expression -> FLOAT .)


state 14

    (7) expression -> IDENTIFIER .

    MUL_OP          reduce using rule 7 (expression -> IDENTIFIER .)
    ADD_OP          reduce using rule 7 (expression -> IDENTIFIER .)
    COMPARATOR      reduce using rule 7 (expression -> IDENTIFIER .)
    ENTER           reduce using rule 7 (expression -> IDENTIFIER .)
    $end            reduce using rule 7 (expression -> IDENTIFIER .)
    #               reduce using rule 7 (expression -> IDENTIFIER .)
    POINTS          reduce using rule 7 (expression -> IDENTIFIER .)
    (               reduce using rule 7 (expression -> IDENTIFIER .)
    )               reduce using rule 7 (expression -> IDENTIFIER .)


state 15

    (16) expression -> ( . expression )
    (5) expression -> . INT
    (6) expression -> . FLOAT
    (7) expression -> . IDENTIFIER
    (8) expression -> . expression MUL_OP expression
    (9) expression -> . expression ADD_OP expression
    (10) expression -> . expression COMPARATOR expression
    (16) expression -> . ( expression )

    INT             shift and go to state 12
    FLOAT           shift and go to state 13
    IDENTIFIER      shift and go to state 14
    (               shift and go to state 15

    expression                     shift and go to state 24

state 16

    (11) assignation -> IDENTIFIER EQU . expression
    (5) expression -> . INT
    (6) expression -> . FLOAT
    (7) expression -> . IDENTIFIER
    (8) expression -> . expression MUL_OP expression
    (9) expression -> . expression ADD_OP expression
    (10) expression -> . expression COMPARATOR expression
    (16) expression -> . ( expression )

    INT             shift and go to state 12
    FLOAT           shift and go to state 13
    IDENTIFIER      shift and go to state 14
    (               shift and go to state 15

    expression                     shift and go to state 25

state 17

    (13) structure -> IF expression . POINTS ENTER TAB programme #
    (8) expression -> expression . MUL_OP expression
    (9) expression -> expression . ADD_OP expression
    (10) expression -> expression . COMPARATOR expression

    POINTS          shift and go to state 26
    MUL_OP          shift and go to state 21
    ADD_OP          shift and go to state 22
    COMPARATOR      shift and go to state 23


state 18

    (14) structure -> DEF expression . ( ) POINTS ENTER TAB programme #
    (8) expression -> expression . MUL_OP expression
    (9) expression -> expression . ADD_OP expression
    (10) expression -> expression . COMPARATOR expression

    (               shift and go to state 27
    MUL_OP          shift and go to state 21
    ADD_OP          shift and go to state 22
    COMPARATOR      shift and go to state 23


state 19

    (15) structure -> WHILE expression . POINTS ENTER TAB programme #
    (8) expression -> expression . MUL_OP expression
    (9) expression -> expression . ADD_OP expression
    (10) expression -> expression . COMPARATOR expression

    POINTS          shift and go to state 28
    MUL_OP          shift and go to state 21
    ADD_OP          shift and go to state 22
    COMPARATOR      shift and go to state 23


state 20

    (2) programme -> statement ENTER programme .

    $end            reduce using rule 2 (programme -> statement ENTER programme .)
    #               reduce using rule 2 (programme -> statement ENTER programme .)


state 21

    (8) expression -> expression MUL_OP . expression
    (5) expression -> . INT
    (6) expression -> . FLOAT
    (7) expression -> . IDENTIFIER
    (8) expression -> . expression MUL_OP expression
    (9) expression -> . expression ADD_OP expression
    (10) expression -> . expression COMPARATOR expression
    (16) expression -> . ( expression )

    INT             shift and go to state 12
    FLOAT           shift and go to state 13
    IDENTIFIER      shift and go to state 14
    (               shift and go to state 15

    expression                     shift and go to state 29

state 22

    (9) expression -> expression ADD_OP . expression
    (5) expression -> . INT
    (6) expression -> . FLOAT
    (7) expression -> . IDENTIFIER
    (8) expression -> . expression MUL_OP expression
    (9) expression -> . expression ADD_OP expression
    (10) expression -> . expression COMPARATOR expression
    (16) expression -> . ( expression )

    INT             shift and go to state 12
    FLOAT           shift and go to state 13
    IDENTIFIER      shift and go to state 14
    (               shift and go to state 15

    expression                     shift and go to state 30

state 23

    (10) expression -> expression COMPARATOR . expression
    (5) expression -> . INT
    (6) expression -> . FLOAT
    (7) expression -> . IDENTIFIER
    (8) expression -> . expression MUL_OP expression
    (9) expression -> . expression ADD_OP expression
    (10) expression -> . expression COMPARATOR expression
    (16) expression -> . ( expression )

    INT             shift and go to state 12
    FLOAT           shift and go to state 13
    IDENTIFIER      shift and go to state 14
    (               shift and go to state 15

    expression                     shift and go to state 31

state 24

    (16) expression -> ( expression . )
    (8) expression -> expression . MUL_OP expression
    (9) expression -> expression . ADD_OP expression
    (10) expression -> expression . COMPARATOR expression

    )               shift and go to state 32
    MUL_OP          shift and go to state 21
    ADD_OP          shift and go to state 22
    COMPARATOR      shift and go to state 23


state 25

    (11) assignation -> IDENTIFIER EQU expression .
    (8) expression -> expression . MUL_OP expression
    (9) expression -> expression . ADD_OP expression
    (10) expression -> expression . COMPARATOR expression

    ENTER           reduce using rule 11 (assignation -> IDENTIFIER EQU expression .)
    $end            reduce using rule 11 (assignation -> IDENTIFIER EQU expression .)
    #               reduce using rule 11 (assignation -> IDENTIFIER EQU expression .)
    MUL_OP          shift and go to state 21
    ADD_OP          shift and go to state 22
    COMPARATOR      shift and go to state 23


state 26

    (13) structure -> IF expression POINTS . ENTER TAB programme #

    ENTER           shift and go to state 33


state 27

    (14) structure -> DEF expression ( . ) POINTS ENTER TAB programme #

    )               shift and go to state 34


state 28

    (15) structure -> WHILE expression POINTS . ENTER TAB programme #

    ENTER           shift and go to state 35


state 29

    (8) expression -> expression MUL_OP expression .
    (8) expression -> expression . MUL_OP expression
    (9) expression -> expression . ADD_OP expression
    (10) expression -> expression . COMPARATOR expression

    MUL_OP          reduce using rule 8 (expression -> expression MUL_OP expression .)
    ADD_OP          reduce using rule 8 (expression -> expression MUL_OP expression .)
    ENTER           reduce using rule 8 (expression -> expression MUL_OP expression .)
    $end            reduce using rule 8 (expression -> expression MUL_OP expression .)
    #               reduce using rule 8 (expression -> expression MUL_OP expression .)
    POINTS          reduce using rule 8 (expression -> expression MUL_OP expression .)
    (               reduce using rule 8 (expression -> expression MUL_OP expression .)
    )               reduce using rule 8 (expression -> expression MUL_OP expression .)
    COMPARATOR      shift and go to state 23

  ! COMPARATOR      [ reduce using rule 8 (expression -> expression MUL_OP expression .) ]
  ! MUL_OP          [ shift and go to state 21 ]
  ! ADD_OP          [ shift and go to state 22 ]


state 30

    (9) expression -> expression ADD_OP expression .
    (8) expression -> expression . MUL_OP expression
    (9) expression -> expression . ADD_OP expression
    (10) expression -> expression . COMPARATOR expression

    ADD_OP          reduce using rule 9 (expression -> expression ADD_OP expression .)
    ENTER           reduce using rule 9 (expression -> expression ADD_OP expression .)
    $end            reduce using rule 9 (expression -> expression ADD_OP expression .)
    #               reduce using rule 9 (expression -> expression ADD_OP expression .)
    POINTS          reduce using rule 9 (expression -> expression ADD_OP expression .)
    (               reduce using rule 9 (expression -> expression ADD_OP expression .)
    )               reduce using rule 9 (expression -> expression ADD_OP expression .)
    MUL_OP          shift and go to state 21
    COMPARATOR      shift and go to state 23

  ! MUL_OP          [ reduce using rule 9 (expression -> expression ADD_OP expression .) ]
  ! COMPARATOR      [ reduce using rule 9 (expression -> expression ADD_OP expression .) ]
  ! ADD_OP          [ shift and go to state 22 ]


state 31

    (10) expression -> expression COMPARATOR expression .
    (8) expression -> expression . MUL_OP expression
    (9) expression -> expression . ADD_OP expression
    (10) expression -> expression . COMPARATOR expression

    MUL_OP          reduce using rule 10 (expression -> expression COMPARATOR expression .)
    ADD_OP          reduce using rule 10 (expression -> expression COMPARATOR expression .)
    COMPARATOR      reduce using rule 10 (expression -> expression COMPARATOR expression .)
    ENTER           reduce using rule 10 (expression -> expression COMPARATOR expression .)
    $end            reduce using rule 10 (expression -> expression COMPARATOR expression .)
    #               reduce using rule 10 (expression -> expression COMPARATOR expression .)
    POINTS          reduce using rule 10 (expression -> expression COMPARATOR expression .)
    (               reduce using rule 10 (expression -> expression COMPARATOR expression .)
    )               reduce using rule 10 (expression -> expression COMPARATOR expression .)

  ! MUL_OP          [ shift and go to state 21 ]
  ! ADD_OP          [ shift and go to state 22 ]
  ! COMPARATOR      [ shift and go to state 23 ]


state 32

    (16) expression -> ( expression ) .

    MUL_OP          reduce using rule 16 (expression -> ( expression ) .)
    ADD_OP          reduce using rule 16 (expression -> ( expression ) .)
    COMPARATOR      reduce using rule 16 (expression -> ( expression ) .)
    ENTER           reduce using rule 16 (expression -> ( expression ) .)
    $end            reduce using rule 16 (expression -> ( expression ) .)
    #               reduce using rule 16 (expression -> ( expression ) .)
    POINTS          reduce using rule 16 (expression -> ( expression ) .)
    (               reduce using rule 16 (expression -> ( expression ) .)
    )               reduce using rule 16 (expression -> ( expression ) .)


state 33

    (13) structure -> IF expression POINTS ENTER . TAB programme #

    TAB             shift and go to state 36


state 34

    (14) structure -> DEF expression ( ) . POINTS ENTER TAB programme #

    POINTS          shift and go to state 37


state 35

    (15) structure -> WHILE expression POINTS ENTER . TAB programme #

    TAB             shift and go to state 38


state 36

    (13) structure -> IF expression POINTS ENTER TAB . programme #
    (1) programme -> . statement
    (2) programme -> . statement ENTER programme
    (3) statement -> . assignation
    (4) statement -> . structure
    (12) statement -> . PRINT expression
    (11) assignation -> . IDENTIFIER EQU expression
    (13) structure -> . IF expression POINTS ENTER TAB programme #
    (14) structure -> . DEF expression ( ) POINTS ENTER TAB programme #
    (15) structure -> . WHILE expression POINTS ENTER TAB programme #

    PRINT           shift and go to state 5
    IDENTIFIER      shift and go to state 6
    IF              shift and go to state 7
    DEF             shift and go to state 8
    WHILE           shift and go to state 9

    programme                      shift and go to state 39
    statement                      shift and go to state 2
    assignation                    shift and go to state 3
    structure                      shift and go to state 4

state 37

    (14) structure -> DEF expression ( ) POINTS . ENTER TAB programme #

    ENTER           shift and go to state 40


state 38

    (15) structure -> WHILE expression POINTS ENTER TAB . programme #
    (1) programme -> . statement
    (2) programme -> . statement ENTER programme
    (3) statement -> . assignation
    (4) statement -> . structure
    (12) statement -> . PRINT expression
    (11) assignation -> . IDENTIFIER EQU expression
    (13) structure -> . IF expression POINTS ENTER TAB programme #
    (14) structure -> . DEF expression ( ) POINTS ENTER TAB programme #
    (15) structure -> . WHILE expression POINTS ENTER TAB programme #

    PRINT           shift and go to state 5
    IDENTIFIER      shift and go to state 6
    IF              shift and go to state 7
    DEF             shift and go to state 8
    WHILE           shift and go to state 9

    programme                      shift and go to state 41
    statement                      shift and go to state 2
    assignation                    shift and go to state 3
    structure                      shift and go to state 4

state 39

    (13) structure -> IF expression POINTS ENTER TAB programme . #

    #               shift and go to state 42


state 40

    (14) structure -> DEF expression ( ) POINTS ENTER . TAB programme #

    TAB             shift and go to state 43


state 41

    (15) structure -> WHILE expression POINTS ENTER TAB programme . #

    #               shift and go to state 44


state 42

    (13) structure -> IF expression POINTS ENTER TAB programme # .

    ENTER           reduce using rule 13 (structure -> IF expression POINTS ENTER TAB programme # .)
    $end            reduce using rule 13 (structure -> IF expression POINTS ENTER TAB programme # .)
    #               reduce using rule 13 (structure -> IF expression POINTS ENTER TAB programme # .)


state 43

    (14) structure -> DEF expression ( ) POINTS ENTER TAB . programme #
    (1) programme -> . statement
    (2) programme -> . statement ENTER programme
    (3) statement -> . assignation
    (4) statement -> . structure
    (12) statement -> . PRINT expression
    (11) assignation -> . IDENTIFIER EQU expression
    (13) structure -> . IF expression POINTS ENTER TAB programme #
    (14) structure -> . DEF expression ( ) POINTS ENTER TAB programme #
    (15) structure -> . WHILE expression POINTS ENTER TAB programme #

    PRINT           shift and go to state 5
    IDENTIFIER      shift and go to state 6
    IF              shift and go to state 7
    DEF             shift and go to state 8
    WHILE           shift and go to state 9

    programme                      shift and go to state 45
    statement                      shift and go to state 2
    assignation                    shift and go to state 3
    structure                      shift and go to state 4

state 44

    (15) structure -> WHILE expression POINTS ENTER TAB programme # .

    ENTER           reduce using rule 15 (structure -> WHILE expression POINTS ENTER TAB programme # .)
    $end            reduce using rule 15 (structure -> WHILE expression POINTS ENTER TAB programme # .)
    #               reduce using rule 15 (structure -> WHILE expression POINTS ENTER TAB programme # .)


state 45

    (14) structure -> DEF expression ( ) POINTS ENTER TAB programme . #

    #               shift and go to state 46


state 46

    (14) structure -> DEF expression ( ) POINTS ENTER TAB programme # .

    ENTER           reduce using rule 14 (structure -> DEF expression ( ) POINTS ENTER TAB programme # .)
    $end            reduce using rule 14 (structure -> DEF expression ( ) POINTS ENTER TAB programme # .)
    #               reduce using rule 14 (structure -> DEF expression ( ) POINTS ENTER TAB programme # .)

